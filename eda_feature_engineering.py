# -*- coding: utf-8 -*-
"""EDA_Feature_Engineering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10koyDUPr_1Al3RT59ymmiJO4oKYVvbYi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
#to ignore warnings
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("titanic.csv")

data.head()

data.tail()

data.info()

data.isnull().sum()

(data.isnull().sum()/(len(data)))*100

data = data.drop(['PassengerId'], axis = 1)

data.head()

data.info()

data['First Name'] = data.Name.str.split().str[0]
data['Surname'] = data.Name.str.split().str[1:].str.join(' ')

data.columns

data[['Name','First Name','Surname']]

print(data.Pclass.unique())

print(data.Pclass.nunique())

data.describe().T

data.describe(include='all').T

cat_cols=data.select_dtypes(include=['object']).columns
num_cols = data.select_dtypes(include=np.number).columns.tolist()
print("Categorical Variables:")
print(cat_cols)
print("Numerical Variables:")
print(num_cols)

"""**UNIVARIATE ANALYSIS**"""

for col in num_cols:
    print(col)
    print('Skew :', round(data[col].skew(), 2))
    plt.figure(figsize = (15, 4))
    plt.subplot(1, 2, 1)
    data[col].hist(grid=False)
    plt.ylabel('count')
    plt.subplot(1, 2, 2)
    sns.boxplot(x=data[col])
    plt.show()

fig, axes = plt.subplots(3, 2, figsize = (18, 18))
fig.suptitle('Bar plot for all categorical variables in the dataset')
sns.countplot(ax = axes[0, 0], x = 'Name', data = data, color = 'blue',
              order = data['Name'].value_counts().index);
sns.countplot(ax = axes[0, 1], x = 'Sex', data = data, color = 'blue',
              order = data['Sex'].value_counts().index);
sns.countplot(ax = axes[1, 0], x = 'Ticket', data = data, color = 'blue',
              order = data['Ticket'].value_counts().index);
sns.countplot(ax = axes[1, 1], x = 'Cabin', data = data, color = 'blue',
              order = data['Cabin'].value_counts().index);
sns.countplot(ax = axes[2, 0], x = 'Embarked', data = data, color = 'blue',
              order = data['Embarked'].head(20).value_counts().index);
sns.countplot(ax = axes[2, 1], x = 'Surname', data = data, color = 'blue',
             order = data['Surname'].head(20).value_counts().index);
axes[1][1].tick_params(labelrotation=45);
axes[2][0].tick_params(labelrotation=90);
axes[2][1].tick_params(labelrotation=90);

# Function for log transformation of the column
def log_transform(data,col):
    for colname in col:
        if (data[colname] == 1.0).all():
            data[colname + '_log'] = np.log(data[colname]+1)
        else:
            data[colname + '_log'] = np.log(data[colname])
    data.info()

log_transform(data,['Age','Fare'])
sns.distplot(data["Age_log"], axlabel="Age_log");

plt.figure(figsize=(13,17))
sns.pairplot(data=data.drop(['Age','Fare'],axis=1))
plt.show()

plt.figure(figsize=(12, 7))
sns.heatmap(data.drop(['Age','Fare'],axis=1).corr(), annot = True, vmin = -1, vmax = 1)
plt.show()

data.loc[data["Fare"]==0.0,'Fare']=np.nan
data.Fare.isnull().sum()

data['Fare'].fillna(value=np.mean(data['Fare']),inplace=True)

data.loc[data["Fare"]==0.0,'Fare']=np.nan
data.Fare.isnull().sum()

log_transform(data,['Age','Fare'])
sns.distplot(data["Age"], axlabel="Age");

sns.distplot(data["Fare"], axlabel="Fare");

